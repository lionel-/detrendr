// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mean_frames
NumericVector mean_frames(NumericVector arr3d);
RcppExport SEXP _detrendr_mean_frames(SEXP arr3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr3d(arr3dSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_frames(arr3d));
    return rcpp_result_gen;
END_RCPP
}
// med_reflect_extend_rows_
NumericMatrix med_reflect_extend_rows_(NumericMatrix current, NumericMatrix original, std::size_t extend_both_sides_by, bool preserve_mean, bool smooth);
RcppExport SEXP _detrendr_med_reflect_extend_rows_(SEXP currentSEXP, SEXP originalSEXP, SEXP extend_both_sides_bySEXP, SEXP preserve_meanSEXP, SEXP smoothSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type current(currentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type original(originalSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type extend_both_sides_by(extend_both_sides_bySEXP);
    Rcpp::traits::input_parameter< bool >::type preserve_mean(preserve_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type smooth(smoothSEXP);
    rcpp_result_gen = Rcpp::wrap(med_reflect_extend_rows_(current, original, extend_both_sides_by, preserve_mean, smooth));
    return rcpp_result_gen;
END_RCPP
}
// med_reflect_extend_pillars_
NumericVector med_reflect_extend_pillars_(NumericVector current, NumericVector original, std::size_t extend_both_sides_by, bool preserve_mean, bool smooth);
RcppExport SEXP _detrendr_med_reflect_extend_pillars_(SEXP currentSEXP, SEXP originalSEXP, SEXP extend_both_sides_bySEXP, SEXP preserve_meanSEXP, SEXP smoothSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type current(currentSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type original(originalSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type extend_both_sides_by(extend_both_sides_bySEXP);
    Rcpp::traits::input_parameter< bool >::type preserve_mean(preserve_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type smooth(smoothSEXP);
    rcpp_result_gen = Rcpp::wrap(med_reflect_extend_pillars_(current, original, extend_both_sides_by, preserve_mean, smooth));
    return rcpp_result_gen;
END_RCPP
}
// mean_pillars_
NumericMatrix mean_pillars_(NumericVector arr3d);
RcppExport SEXP _detrendr_mean_pillars_(SEXP arr3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr3d(arr3dSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_pillars_(arr3d));
    return rcpp_result_gen;
END_RCPP
}
// var_pillars_
NumericMatrix var_pillars_(NumericVector arr3d);
RcppExport SEXP _detrendr_var_pillars_(SEXP arr3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr3d(arr3dSEXP);
    rcpp_result_gen = Rcpp::wrap(var_pillars_(arr3d));
    return rcpp_result_gen;
END_RCPP
}
// median_pillars_
NumericMatrix median_pillars_(NumericVector arr3d);
RcppExport SEXP _detrendr_median_pillars_(SEXP arr3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr3d(arr3dSEXP);
    rcpp_result_gen = Rcpp::wrap(median_pillars_(arr3d));
    return rcpp_result_gen;
END_RCPP
}
// myrbernoulli_
IntegerVector myrbernoulli_(NumericVector p, int seed);
RcppExport SEXP _detrendr_myrbernoulli_(SEXP pSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(myrbernoulli_(p, seed));
    return rcpp_result_gen;
END_RCPP
}
// brightness_rows_
NumericVector brightness_rows_(IntegerMatrix rows);
RcppExport SEXP _detrendr_brightness_rows_(SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(brightness_rows_(rows));
    return rcpp_result_gen;
END_RCPP
}
// mean_rows_
NumericVector mean_rows_(IntegerMatrix rows);
RcppExport SEXP _detrendr_mean_rows_(SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_rows_(rows));
    return rcpp_result_gen;
END_RCPP
}
// myrpois_
IntegerVector myrpois_(NumericVector means, int seed);
RcppExport SEXP _detrendr_myrpois_(SEXP meansSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type means(meansSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(myrpois_(means, seed));
    return rcpp_result_gen;
END_RCPP
}
// myrpois_frames_
IntegerMatrix myrpois_frames_(NumericVector means, std::size_t frame_length, int seed);
RcppExport SEXP _detrendr_myrpois_frames_(SEXP meansSEXP, SEXP frame_lengthSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type means(meansSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type frame_length(frame_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(myrpois_frames_(means, frame_length, seed));
    return rcpp_result_gen;
END_RCPP
}
// boxcar_smooth
NumericVector boxcar_smooth(NumericVector extended, std::size_t extended_both_sides_by, std::size_t l);
RcppExport SEXP _detrendr_boxcar_smooth(SEXP extendedSEXP, SEXP extended_both_sides_bySEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type extended(extendedSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type extended_both_sides_by(extended_both_sides_bySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(boxcar_smooth(extended, extended_both_sides_by, l));
    return rcpp_result_gen;
END_RCPP
}
// weighted_smooth
NumericVector weighted_smooth(NumericVector extended, std::size_t extended_both_sides_by, NumericVector weights, double weight_sum);
RcppExport SEXP _detrendr_weighted_smooth(SEXP extendedSEXP, SEXP extended_both_sides_bySEXP, SEXP weightsSEXP, SEXP weight_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type extended(extendedSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type extended_both_sides_by(extended_both_sides_bySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type weight_sum(weight_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_smooth(extended, extended_both_sides_by, weights, weight_sum));
    return rcpp_result_gen;
END_RCPP
}
// exp_smooth
NumericVector exp_smooth(NumericVector extended, std::size_t extended_both_sides_by, double tau, std::size_t l);
RcppExport SEXP _detrendr_exp_smooth(SEXP extendedSEXP, SEXP extended_both_sides_bySEXP, SEXP tauSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type extended(extendedSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type extended_both_sides_by(extended_both_sides_bySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_smooth(extended, extended_both_sides_by, tau, l));
    return rcpp_result_gen;
END_RCPP
}
// boxcar_smooth_rows_
NumericMatrix boxcar_smooth_rows_(NumericMatrix extended, std::size_t extended_both_sides_by, std::size_t l);
RcppExport SEXP _detrendr_boxcar_smooth_rows_(SEXP extendedSEXP, SEXP extended_both_sides_bySEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type extended(extendedSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type extended_both_sides_by(extended_both_sides_bySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(boxcar_smooth_rows_(extended, extended_both_sides_by, l));
    return rcpp_result_gen;
END_RCPP
}
// boxcar_smooth_pillars_
NumericVector boxcar_smooth_pillars_(NumericVector extended, std::size_t extended_both_sides_by, std::size_t l);
RcppExport SEXP _detrendr_boxcar_smooth_pillars_(SEXP extendedSEXP, SEXP extended_both_sides_bySEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type extended(extendedSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type extended_both_sides_by(extended_both_sides_bySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(boxcar_smooth_pillars_(extended, extended_both_sides_by, l));
    return rcpp_result_gen;
END_RCPP
}
// exp_smooth_rows_
NumericMatrix exp_smooth_rows_(NumericMatrix extended, std::size_t extended_both_sides_by, double tau, int l);
RcppExport SEXP _detrendr_exp_smooth_rows_(SEXP extendedSEXP, SEXP extended_both_sides_bySEXP, SEXP tauSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type extended(extendedSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type extended_both_sides_by(extended_both_sides_bySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_smooth_rows_(extended, extended_both_sides_by, tau, l));
    return rcpp_result_gen;
END_RCPP
}
// exp_smooth_pillars_
NumericVector exp_smooth_pillars_(NumericVector extended, std::size_t extended_both_sides_by, double tau, int l);
RcppExport SEXP _detrendr_exp_smooth_pillars_(SEXP extendedSEXP, SEXP extended_both_sides_bySEXP, SEXP tauSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type extended(extendedSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type extended_both_sides_by(extended_both_sides_bySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_smooth_pillars_(extended, extended_both_sides_by, tau, l));
    return rcpp_result_gen;
END_RCPP
}
// square_root_
NumericVector square_root_(NumericVector x);
RcppExport SEXP _detrendr_square_root_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(square_root_(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_detrendr_mean_frames", (DL_FUNC) &_detrendr_mean_frames, 1},
    {"_detrendr_med_reflect_extend_rows_", (DL_FUNC) &_detrendr_med_reflect_extend_rows_, 5},
    {"_detrendr_med_reflect_extend_pillars_", (DL_FUNC) &_detrendr_med_reflect_extend_pillars_, 5},
    {"_detrendr_mean_pillars_", (DL_FUNC) &_detrendr_mean_pillars_, 1},
    {"_detrendr_var_pillars_", (DL_FUNC) &_detrendr_var_pillars_, 1},
    {"_detrendr_median_pillars_", (DL_FUNC) &_detrendr_median_pillars_, 1},
    {"_detrendr_myrbernoulli_", (DL_FUNC) &_detrendr_myrbernoulli_, 2},
    {"_detrendr_brightness_rows_", (DL_FUNC) &_detrendr_brightness_rows_, 1},
    {"_detrendr_mean_rows_", (DL_FUNC) &_detrendr_mean_rows_, 1},
    {"_detrendr_myrpois_", (DL_FUNC) &_detrendr_myrpois_, 2},
    {"_detrendr_myrpois_frames_", (DL_FUNC) &_detrendr_myrpois_frames_, 3},
    {"_detrendr_boxcar_smooth", (DL_FUNC) &_detrendr_boxcar_smooth, 3},
    {"_detrendr_weighted_smooth", (DL_FUNC) &_detrendr_weighted_smooth, 4},
    {"_detrendr_exp_smooth", (DL_FUNC) &_detrendr_exp_smooth, 4},
    {"_detrendr_boxcar_smooth_rows_", (DL_FUNC) &_detrendr_boxcar_smooth_rows_, 3},
    {"_detrendr_boxcar_smooth_pillars_", (DL_FUNC) &_detrendr_boxcar_smooth_pillars_, 3},
    {"_detrendr_exp_smooth_rows_", (DL_FUNC) &_detrendr_exp_smooth_rows_, 4},
    {"_detrendr_exp_smooth_pillars_", (DL_FUNC) &_detrendr_exp_smooth_pillars_, 4},
    {"_detrendr_square_root_", (DL_FUNC) &_detrendr_square_root_, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_detrendr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
